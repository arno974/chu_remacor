# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ChuRemacorDialog
                                 A QGIS plugin
 Remacor extentsion
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-10-06
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Arnaud Vandecasteele - arnaud.vdc@geolab.re
        email                : arnaud.vdc@geolab.re
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets, QtCore

from qgis.PyQt.QtWidgets import(    
    QCompleter,
    QListWidgetItem
)

from qgis.core import QgsMapLayerProxyModel, QgsFieldProxyModel, NULL

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'churemacor_dialog_base.ui'))

class ChuRemacorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ChuRemacorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect    
        self.dataFilters = []
        self.setupUi(self)
        self.qListFilters.hide()
        self.qLayerListCas.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.qLayerAnalyseRepartitionCas.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.qFieldsLayerRepartition.setFilters(QgsFieldProxyModel.Numeric)
        self.button_box.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)
        self.qComboBoxMapFormat.setCurrentIndex(0)
        
    def enableCreateMap(self):        
        if self.qCheckBoxCreateMap.isChecked() :
            self.qMapParams.setEnabled(True);
        else :
            self.qMapParams.setEnabled(False);
        return

    def enableCreateFilter(self):        
        if self.qCheckBoxCreateFilter.isChecked() :
            self.qFilterParams.setEnabled(True);            
        else :
            self.qFilterParams.setEnabled(False);
            self.qListFilters.clear()
            self.dataFilters.clear()
        return

    def addRepartitionFields(self, layer):
        self.qFieldsLayerRepartition.setLayer(layer)   
        return

    def setFieldFilterValues(self):
        idx = self.qLayerListCas.currentLayer().fields().indexFromName(
            self.qFieldsFilter.currentField()
        )
        values = self.qLayerListCas.currentLayer().uniqueValues(idx)
        cleanValues = []
        # RuntimeError: Set changed size during iteration - so use copy
        for v in values.copy():
            if v is None or v == NULL :
                values.remove(v)
            elif type(v) == QtCore.QVariant:
                v = str(v.value())
                cleanValues.append(v)
            else :
                v = str(v)
                cleanValues.append(v)        
        
        completer = QCompleter(self)
        
        model = QtCore.QStringListModel()
        model.setStringList(cleanValues)
        completer.setModel(model) 

        completer.setCompletionMode(QCompleter.UnfilteredPopupCompletion)      
        completer.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        completer.ModelSorting(QCompleter.CaseSensitivelySortedModel)

        self.qTextFilterValue.setCompleter(completer)
        return        

    def addFilterFields(self, layer):
        self.qFieldsFilter.setLayer(layer)
        return

    def addNewFilter(self):
        self.qListFilters.show()
        fieldFilter = self.qFieldsFilter.currentField()
        compareFilter = self.buttonGroupFilter.checkedButton().text()
        valueFilter = self.qTextFilterValue.text()
        filter = {
            'fieldFilter' : fieldFilter,
            'compareFilter' : compareFilter,
            'valueFilter' : valueFilter
        }
        self.dataFilters.append(filter)
        item = QListWidgetItem("{} {} {}".format(fieldFilter, compareFilter, valueFilter))
        self.qListFilters.addItem(item)
        self.qTextFilterValue.clear()
        return


    def checkComboBox(self):
        """Check to see that all fields have been entered."""
        if (self.qLayerListCas.currentIndex() !=-1 
                and self.qLayerAnalyseRepartitionCas.currentIndex() !=-1 
                and self.qFieldsLayerRepartition.currentIndex() !=-1) :
            self.button_box.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(True)
            self.qCheckBoxCreateMap.setEnabled(True)
            self.qComboBoxMapFormat.setEnabled(True)
            self.qCheckBoxCreateFilter.setEnabled(True)
            self.groupFilterRadioButton.setEnabled(True)





        
        

