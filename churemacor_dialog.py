# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ChuRemacorDialog
                                 A QGIS plugin
 Remacor extentsion
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-10-06
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Arnaud Vandecasteele - arnaud.vdc@geolab.re
        email                : arnaud.vdc@geolab.re
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.PyQt.QtWidgets import(
    QDialog,
)

from qgis.core import QgsMessageLog, QgsMapLayerProxyModel

from qgis.core import (
    QgsMessageLog,
    Qgis
) 

from qgis.gui import QgsMessageBar

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'churemacor_dialog_base.ui'))

class ChuRemacorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ChuRemacorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect    
        self.setupUi(self)
        self.qLayerListCas.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.qLayerAnalyseRepartitionCas.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.button_box.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)
        
    def changeFilePathState(self):        
        if self.qCheckBoxCreateMap.isChecked() :
            self.qMapFileSave.setEnabled(True);
        else :
            self.qMapFileSave.setEnabled(False);
        return

    def addFields(self, layer):
        self.qFieldsLayerRepartition.setLayer(layer)
        return

    def checkComboBox(self):
        """Check to see that all fields have been entered."""
        if (self.qLayerListCas.currentIndex() !=-1 
                and self.qLayerAnalyseRepartitionCas.currentIndex() !=-1 
                and self.qFieldsLayerRepartition.currentIndex() !=-1) :
            self.button_box.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(True)





        
        

